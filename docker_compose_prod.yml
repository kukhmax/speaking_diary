version: '3.8'

services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    container_name: diary_db_prod
    restart: always
    environment:
      POSTGRES_DB: diary_db
      POSTGRES_USER: diary_user
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
    networks:
      - internal
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U diary_user -d diary_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API (Production)
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: diary_backend_prod
    restart: always
    environment:
      DATABASE_URL: postgresql://diary_user:${DB_PASSWORD}@db:5432/diary_db
      GROQ_API_KEY: ${GROQ_API_KEY}
      FLASK_ENV: production
      SECRET_KEY: ${SECRET_KEY}
    expose:
      - "5000"
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - backend_data_prod:/app/data
    networks:
      - internal
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend (Production)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        REACT_APP_API_URL: ${PRODUCTION_API_URL}
    container_name: diary_frontend_prod
    restart: always
    expose:
      - "80"
    depends_on:
      - backend
    networks:
      - internal
      - web

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: diary_nginx_prod
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - certbot_data:/var/www/certbot
    depends_on:
      - frontend
      - backend
    networks:
      - web
      - internal
    command: "/bin/sh -c 'while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g \"daemon off;\"'"

  # Certbot для SSL (Let's Encrypt)
  certbot:
    image: certbot/certbot
    container_name: diary_certbot
    restart: unless-stopped
    volumes:
      - certbot_data:/var/www/certbot
      - ./nginx/ssl:/etc/letsencrypt
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"

volumes:
  postgres_data_prod:
    driver: local
  backend_data_prod:
    driver: local
  certbot_data:
    driver: local

networks:
  internal:
    driver: bridge
  web:
    driver: bridge