version: '3.8'

services:
  # PostgreSQL (без публикации порта наружу)
  db:
    image: postgres:15-alpine
    container_name: diary_db
    restart: always
    environment:
      POSTGRES_DB: diary_db
      POSTGRES_USER: diary_user
      POSTGRES_PASSWORD: ${DB_PASSWORD:-changeme123}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U diary_user -d diary_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API (Flask)
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: diary_backend
    restart: always
    env_file:
      - .env
    environment:
      DATABASE_URL: postgresql+psycopg2://diary_user:${DB_PASSWORD:-changeme123}@db:5432/diary_db
      GROQ_API_KEY: ${GROQ_API_KEY}
      FLASK_ENV: production
      SECRET_KEY: ${SECRET_KEY:-your-secret-key-change-in-production}
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - backend_data:/app/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend (React, Nginx)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        REACT_APP_API_URL: /api
    container_name: diary_frontend
    restart: always
    depends_on:
      - backend

  # Caddy — HTTPS reverse proxy
  caddy:
    image: caddy:2.7
    container_name: diary_caddy
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile:ro
      - ./certs:/certs:ro
      - caddy_data:/data
      - caddy_config:/config
    depends_on:
      - frontend
      - backend
    networks:
      - default
      - web

volumes:
  postgres_data:
    driver: local
  backend_data:
    driver: local
  caddy_data:
    driver: local
  caddy_config:
    driver: local

networks:
  default:
    name: diary_network
  web:
    external: true
    name: web